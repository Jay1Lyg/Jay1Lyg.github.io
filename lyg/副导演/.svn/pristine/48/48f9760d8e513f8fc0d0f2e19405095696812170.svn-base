/*  按滑块生成方案
*   1.将对应参数保存到对应model中
    2.若选择使用滑块，需要根据滑块值对平台上的演员做匹配，将匹配结果保存到数据库
*/


var keystone = require('keystone'),
	ActorBudget = keystone.list('ActorBudget'),
	ProgrammeMatchActor = keystone.list('ProgrammeMatchActor'),
	Programme = keystone.list('Programme'),
	ProgrammeInCareer = keystone.list('ProgrammeInCareer'),
	ProgrammeInProduction = keystone.list('ProgrammeInProduction');
var async = require('async');
var config = require('../../public/conf/common.js');
var search = require('../../query/save_and_get_data_in_MongoDB/programme/search.js');
var urllib = require('url');
exports = module.exports = function(req, res) {
   var params = req.body;
   var production_id = params.production_id;//项目id
   var leadingactor_budget_ratio = params.leadingactor_budget_ratio;//领衔主演预算比
   var guestactor_budget_ratio = params.guestactor_budget_ratio;//客串主演预算比
   var starringingroup_budget_ratio = params.starringingroup_budget_ratio;//跟组主演预算比
   var other_budget_ratio = params.other_budget_ratio;//其他演员预算比
   var name = params.name;//方案名
   var userid = params.userid;//当前用户的id
   //var attribute = param.attribute;//1--使用滑块 2--自定义方案
   async.waterfall([
      function(callback){//判断当前剧目是否已经生成过方案
        ProgrammeInProduction.model.findOne
	     .where('user_id',userid)
	     .where('production_id',production_id)
	     .exec(function(err,ret){
	        if(err){
	          throw new Error(err);
	        }else{
	        	if(ret2==null){//该剧目还未生成过方案
	              ProgrammeInProduction.model.create({
	              	 user_id : userid,
	              	 production_id : production_id
	              },function(err,ret1){
	                  if(err){
	                    throw new Error(err); 
	                  }else{
                        callback(null,ret1);
	                  }
	              })
	        	}else{//已经生成过，不需在新建
	        		callback(null,ret);
	        	}
	        }
	    })
      },function(arg,callback){//演员预算比去重，若有相同的预算比就不再新建
          ActorBudget.model.findOne()
	       .where('leadingactor_budget_ratio',leadingactor_budget_ratio)
	       .where('guestactor_budget_ratio',guestactor_budget_ratio)
	       .where('starringingroup_budget_ratio',starringingroup_budget_ratio)
	       .where('other_budget_ratio',other_budget_ratio)
	       .exec(function(err,ret){
	         if(err){
	           throw new Error(err);
	         }else{
	         	if(ret==null){
	              ActorBudget.model.create({
	              	leadingactor_budget_ratio : leadingactor_budget_ratio,
	              	guestactor_budget_ratio : guestactor_budget_ratio,
	              	starringingroup_budget_ratio : starringingroup_budget_ratio,
	              	other_budget_ratio : other_budget_ratio
	              },function(err,ret1){
	                  if(err){
	                    throw new Error(err);
	                  }else{
                         callback(null,arg,ret1);
	                  }
	              })
	         	}else{
	         		callback(null,arg,ret);
	         	}
	         }
	       })
      },function(arg1,arg2,callback){//生成方案
          Programme.model.create({
          	name: name, 
	        actorbudget_id : arg2._id,
	        programmeinproduction : arg1._id,
	        attribute : 1
          },function(err,ret){
              if(err){
                 throw new Error(err);
              }else{
              	 callback(null,arg2);
              }
          })
      },function(arg,callback){//按照滑块值匹配全平台上演员,保存到数据库
          search.matchActorByActorBudgetRetio(production_id,arg,function(err,ret){
              if(err){
                 throw new Error(err);
              }else{
                 callback(null);
              }
          });
      }
      // ,function(){//为每条角色推荐三个合适的演员
      //     search.searchThreeActorsForProgramme(production_id,function(err,ret){

      //     })
      // }
   ],function(err){
      if(err){
          throw new Error(err);
      }else{
      	  //跳转到方案管理页面
      	  res.send('success!');
      }
   })
}
