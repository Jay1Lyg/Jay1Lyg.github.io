var async = require('async');
var keystone = require('keystone'),
    Role = keystone.list('Role'),
  	User = keystone.list('User'),
	  CareerInCrew = keystone.list('CareerInCrew'),
    Resume = keystone.list('Resume');
    Casting = keystone.list('Casting');

var config = require('../../../public/conf/common.js');
var actor_format=require('../actor/format.js');
var user_search=require('../user/search.js');

var matchactordetails = function(obj,user,callback){
  console.log('----------user----------');
  console.log(user);
  console.log('----------user----------');
  var flag = false;
  async.waterfall([
  	function(callback){
       if(obj.gender==''||obj.gender==0){
          console.log('gender不限');
          flag=true;
          callback(null,flag);
       }else if(obj.gender!=0){
          if(obj.gender==user.gender){
             console.log('gender匹配成功');
             flag=true;
             callback(null,flag);
          }else{
            console.log('gender匹配失败');
       	    flag=false;
       	    callback(null,flag);
          }
       }
    },function(arg,callback){
       if(flag){//性别匹配成功，匹配年龄段
         if(obj.age == 0){//年龄段未填写，进行全局匹配
           console.log('age不限');
           flag = true;
           callback(null,flag);
         }else{//填写了年龄段，判断演员是否在该年龄段内  item.birth.getFullYear()
           user_search.groupbyAge(obj.age,user.birth.getFullYear(),function(err,age_result){
              if(err){
                throw new Error(err);
              }else{
                console.log('匹配age');
                console.log(age_result);
                console.log('匹配age');
              	callback(null,age_result);
              }
           })
         }
       }else{//匹配失败
          console.log('上一步匹配失败');
          callback(null,arg);
       }
    },function(arg,callback){
        if(arg){//匹配成功，匹配身高
           if(obj.max_height==''){
             console.log('最高身高不限');
             if(obj.min_height==''){
                console.log('最低身高不限');
                flag = true;
                callback(null,flag); 
             }else{//填了最小身高，最大没填,身高大于最小身高的符合
                console.log('最低身高：'+obj.min_height);
                console.log('用户身高：'+user.height);
                if(user.height>=obj.min_height){
                    console.log('身高匹配成功');
                    flag = true;
                    callback(null,flag); 
                }else{
                  console.log('身高匹配失败');
                	flag = false;
                	callback(null,flag); 
                }
             }
           }else{
              console.log('最高身高：'+obj.max_height);
           	  if(obj.min_height==''){//填了最大身高，最小没填,身高小于最大身高的符合
                 console.log('最低身高不限');
                 if(user.height<=obj.max_height){
                    console.log('用户身高：'+user.height);
                    console.log('身高匹配成功');
                    flag = true;
                    callback(null,flag); 
                 }else{
                  console.log('身高匹配失败');
                  flag = false;
                	callback(null,flag); 
                 }
           	  }else{
                console.log('最低身高：'+obj.min_height);
                 if(obj.min_height<=user.height<=obj.max_height){
                    console.log('用户身高：'+user.height);
                    console.log('身高匹配成功');
                    flag = true;
                    callback(null,flag); 
                 }else{
                  console.log('身高匹配失败');
                  flag = false;
                  callback(null,flag); 
                 }
              }
           }
        }else{//匹配失败
            console.log('上一步匹配失败');
            flag=false;
       	    callback(null,flag);
        } 
    },function(arg,callback){
       if(arg){//匹配成功，匹配体型  匹配公式：BMI=体重（kg）/(身高（m）*身高（m）)   
          if(obj.shap==0){//表示不限
             console.log('shap不限');
             flag=true;
             callback(null,flag);
          }else{
             var height = user.height/100;//(换算成m)
             var BMI = user.weight/(height*height);
             if(user.gender==1){//性别为男（男女计算公式不同）
                actor_format.matchShapAccordingToMale(obj.shap,BMI,function(err,flag){
                  if(err){
                     throw new Error(err);
                  }else{
                    console.log('男生体格匹配');
                    console.log('BMI:'+BMI);
                    console.log(obj.shap);
                    callback(null,flag);
                  }
                });
             }else if(user.gender==2){
                actor_format.matchShapAccordingToFemale(obj.shap,BMI,function(err,flag){
                   if(err){
                     throw new Error(err);
                   }else{
                    console.log('女生体格匹配');
                    console.log('BMI:'+BMI);
                    console.log(obj.shap);
                    callback(null,flag);
                   }
                });
             }
          }
       }else{
          console.log('上一步匹配失败');
          flag=false;
          callback(null,flag);
       }
    },function(arg,callback){
       if(arg){//匹配成功，匹配技能特长
          console.log('体格匹配成功');
          if(obj.skillArray.length==0){
             console.log('技能不限');
             flag = true;
             callback(null,flag);
          }else{
          	actor_format.formatMatchTag(obj.skillArray,user.skill,function(err,flag){
               if(err){
                  throw new Error(err);
               }else{              	  
                  callback(null,flag);
               }
          	});
          }
       }else{
            console.log('上一步匹配失败');
            flag=false;
       	    callback(null,flag); 
       }
    },function(arg,callback){
        if(arg){//匹配成功，匹配角色特征
          console.log('技能匹配成功');
           if(obj.featureArray.length == 0){
              console.log('特征不限');
              flag = true;
              callback(null,flag);
           }else{
              actor_format.formatMatchTag(obj.featureArray,user.feature,function(err,flag){
               if(err){
                  throw new Error(err);
               }else{              	  
                  callback(null,flag);
               }
          	});
           }
        }else{
            flag=false;
            callback(null,flag); 
        }
    },function(arg,callback){
        if(arg){//匹配成功,匹配剧目类别
          console.log('特征匹配成功');
           if(obj.categoryid==''||obj.categoryid=='59aa2930d1caefb01b1f6e44'){//剧目类别没填或者为不限
              console.log('剧目类别不限');
              flag = true;
              callback(null,arg);
           }else{
              actor_format.isTagsTypeMatch(obj.categoryid,user.category,function(err,ret){
                 if(err){
                    throw new Error(err);
                 }else{
                    callback(null,ret);
                 }
              });
           }
        }else{
            console.log('上一步匹配失败');
            flag=false;
            callback(null,flag); 
        }
    },function(arg,callback){
        if(arg){//匹配成功，匹配剧目类型
          console.log('特征匹配成功');
          if(obj.repertoireArray.length == 0){
              console.log('剧目类型不限');
              flag = true;
              callback(null,flag);
           }else{
              actor_format.formatMatchTag(obj.repertoireArray,user.repertoireTpye,function(err,flag){
               if(err){
                  throw new Error(err);
               }else{                 
                  callback(null,flag);
               }
            });
           } 
        }else{
           console.log('上一步匹配失败');
            flag=false;
            callback(null,flag); 
        }
    },function(arg,callback){
        if(arg){//匹配成功，匹配角色类别
           console.log('剧目类型匹配成功');
           if(obj.roletypeArray.length==0){
              console.log('角色类别不限');
              flag = true;
              callback(null,flag);
           }else{
              actor_format.formatMatchTag(obj.roletypeArray,user.role_tag,function(err,flag){
                 if(err){
                    throw new Error(err);
                 }else{                 
                    callback(null,flag);
                 }
              });
           }     
        }else{
          console.log('上一步匹配失败');
          flag=false;
          callback(null,flag); 
        }
    },function(arg,callback){
        if(arg){//匹配成功，匹配片酬
           console.log('角色类别匹配成功');
           if(obj.rolepaycheck==''){
             flag=true;
             callback(null,flag);
           }else{
             //var SalaryoffsetValue = (user.paycheck - obj.rolepaycheck)/obj.rolepaycheck;
             if(-1<user.SalaryoffsetValue<2){
               console.log('偏移值匹配成功');
                flag=true;
                callback(null,flag);
             }else{
                console.log('偏移值匹配失败');
                flag=false;
                callback(null,flag);
             }
           } 
           
        }else{
          console.log('上一步匹配失败');
          flag=false;
          callback(null,flag);
        }
    }
  ],function(err,arg){
     if(err){
        throw new Error(err);
     }else{
        callback(null,arg);
     }
  })
}
//查询演员详细信息
var searchactordetails = function(userinfo,obj,callback){
  var now_date = new Date();
  var data = {};
    console.log('--------userinfo--------');
    console.log(userinfo);
    console.log('--------userinfo--------');
    data.id = userinfo._id;
		data.name = userinfo.name;
		data.realname = userinfo.realname;
		data.gender = userinfo.gender;
		data.age = now_date.getFullYear() - userinfo._.birth.format('YYYY'); 
		data.birth = userinfo.birth; 
		data.height = userinfo.height;
		data.shortintroduce = userinfo.shortintroduce;
		data.weight = userinfo.weight;
		data.telephone = userinfo.telephone;
		data.agentTelphone = userinfo.agentTelphone;
		data.email = userinfo.email;
		data.currentStatus = userinfo.currentStatus;
		data.artname = userinfo.artname;
		data.id_number = userinfo.id_number;
		data.user_address = userinfo.user_address;
	  data.schedule = userinfo.schedule;
	  data.paycheck = userinfo.paycheck;
    (obj.rolepaycheck!='')?(data.SalaryoffsetValue = (userinfo.paycheck - obj.rolepaycheck)/obj.rolepaycheck):(data.SalaryoffsetValue);
	  (userinfo.bust!=undefined)?( data.bust = userinfo.bust):(data.bust='');
	  (userinfo.waist!=undefined)?( data.waist = userinfo.waist):(data.waist='');
	  (userinfo.hip!=undefined)?( data.hip = userinfo.hip):(data.hip='');
	  (userinfo.schoolname!=undefined)?( data.schoolname = userinfo.schoolname):(data.schoolname='');
    (userinfo.role_tag!=undefined)?( data.role_tag = userinfo.role_tag):(data.role_tag='');
	  (userinfo.skill!=undefined)?( data.skill = userinfo.skill):(data.skill='');
	  (userinfo.category!=undefined)?( data.category = userinfo.category):(data.category='');
	  (userinfo.feature!=undefined)?( data.feature = userinfo.feature):(data.feature='');
		(userinfo.images.length>0) ? (data.iconUrl = config.homeEntry.url+'/WX/users/' + userinfo.images[userinfo.images.length-1].filename) : (data.iconUrl="") ;
	    CaregoryInTarget.model.findOne()
	      .where('user_id',data.id)
	      .exec(function(err,ret1){
	         data.category = ret1.category;
	         data.repertoireTpye = ret1.repertoireTpye;
	         if(err){
                throw new Error(err);
	         }else{
	           callback(null,data);
	         } 
	    }) 
}

var Sortbyoffset = function(userarray,callback){
  for(var i = 0;i < userarray.length - 1; i++){
    for(var j = i + 1;j < userarray.length;j++){
        if (userarray[i] < userarray[j]){
          var temp = userarray[i];
          userarray[i] = userarray[j];
          userarray[j] = temp;
        }
    }
  } 
    callback(null,userarray);
}



module.exports = {
  matchactordetails: matchactordetails,
  searchactordetails : searchactordetails,
  Sortbyoffset : Sortbyoffset

}
